{
  "version": 3,
  "sources": ["../../linkify-it/lib/re.mjs", "../../linkify-it/index.mjs"],
  "sourcesContent": ["import { Any, Cc, Z, P } from 'uc.micro'\r\n\r\nexport default function (opts) {\r\n  const re = {}\r\n  opts = opts || {}\r\n\r\n  re.src_Any = Any.source\r\n  re.src_Cc = Cc.source\r\n  re.src_Z = Z.source\r\n  re.src_P = P.source\r\n\r\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\r\n  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|')\r\n\r\n  // \\p{\\Z\\Cc} (white spaces + control)\r\n  re.src_ZCc = [re.src_Z, re.src_Cc].join('|')\r\n\r\n  // Experimental. List of chars, completely prohibited in links\r\n  // because can separate it from other part of text\r\n  const text_separators = '[><\\uff5c]'\r\n\r\n  // All possible word characters (everything without punctuation, spaces & controls)\r\n  // Defined via punctuation & spaces to save space\r\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\r\n  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')'\r\n  // The same as abothe but without [0-9]\r\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\r\n\r\n  re.src_ip4 =\r\n\r\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)'\r\n\r\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\r\n  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?'\r\n\r\n  re.src_port =\r\n\r\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?'\r\n\r\n  re.src_host_terminator =\r\n\r\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +\r\n    '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))'\r\n\r\n  re.src_path =\r\n\r\n    '(?:' +\r\n      '[/?#]' +\r\n        '(?:' +\r\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-;]).|' +\r\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\r\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\r\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\r\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\r\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\r\n\r\n          // allow `I'm_king` if no pair found\r\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-])|' +\r\n\r\n          // google has many dots in \"google search\" links (#66, #81).\r\n          // github has ... in commit range links,\r\n          // Restrict to\r\n          // - english\r\n          // - percent-encoded\r\n          // - parts of file path\r\n          // - params separator\r\n          // until more examples found.\r\n          '\\\\.{2,}[a-zA-Z0-9%/&]|' +\r\n\r\n          '\\\\.(?!' + re.src_ZCc + '|[.]|$)|' +\r\n          (opts['---']\r\n            ? '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\r\n            : '\\\\-+|'\r\n          ) +\r\n          // allow `,,,` in paths\r\n          ',(?!' + re.src_ZCc + '|$)|' +\r\n\r\n          // allow `;` if not followed by space-like char\r\n          ';(?!' + re.src_ZCc + '|$)|' +\r\n\r\n          // allow `!!!` in paths, but not at the end\r\n          '\\\\!+(?!' + re.src_ZCc + '|[!]|$)|' +\r\n\r\n          '\\\\?(?!' + re.src_ZCc + '|[?]|$)' +\r\n        ')+' +\r\n      '|\\\\/' +\r\n    ')?'\r\n\r\n  // Allow anything in markdown spec, forbid quote (\") at the first position\r\n  // because emails enclosed in quotes are far more common\r\n  re.src_email_name =\r\n\r\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*'\r\n\r\n  re.src_xn =\r\n\r\n    'xn--[a-z0-9\\\\-]{1,59}'\r\n\r\n  // More to read about domain names\r\n  // http://serverfault.com/questions/638260/\r\n\r\n  re.src_domain_root =\r\n\r\n    // Allow letters & digits (http://test1)\r\n    '(?:' +\r\n      re.src_xn +\r\n      '|' +\r\n      re.src_pseudo_letter + '{1,63}' +\r\n    ')'\r\n\r\n  re.src_domain =\r\n\r\n    '(?:' +\r\n      re.src_xn +\r\n      '|' +\r\n      '(?:' + re.src_pseudo_letter + ')' +\r\n      '|' +\r\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\r\n    ')'\r\n\r\n  re.src_host =\r\n\r\n    '(?:' +\r\n    // Don't need IP check, because digits are already allowed in normal domain names\r\n    //   src_ip4 +\r\n    // '|' +\r\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/* _root */ + ')' +\r\n    ')'\r\n\r\n  re.tpl_host_fuzzy =\r\n\r\n    '(?:' +\r\n      re.src_ip4 +\r\n    '|' +\r\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\r\n    ')'\r\n\r\n  re.tpl_host_no_ip_fuzzy =\r\n\r\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))'\r\n\r\n  re.src_host_strict =\r\n\r\n    re.src_host + re.src_host_terminator\r\n\r\n  re.tpl_host_fuzzy_strict =\r\n\r\n    re.tpl_host_fuzzy + re.src_host_terminator\r\n\r\n  re.src_host_port_strict =\r\n\r\n    re.src_host + re.src_port + re.src_host_terminator\r\n\r\n  re.tpl_host_port_fuzzy_strict =\r\n\r\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator\r\n\r\n  re.tpl_host_port_no_ip_fuzzy_strict =\r\n\r\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator\r\n\r\n  //\r\n  // Main rules\r\n  //\r\n\r\n  // Rude test fuzzy links by host, for quick deny\r\n  re.tpl_host_fuzzy_test =\r\n\r\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))'\r\n\r\n  re.tpl_email_fuzzy =\r\n\r\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\r\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')'\r\n\r\n  re.tpl_link_fuzzy =\r\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\r\n      // but can start with > (markdown blockquote)\r\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\r\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')'\r\n\r\n  re.tpl_link_no_ip_fuzzy =\r\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\r\n      // but can start with > (markdown blockquote)\r\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\r\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')'\r\n\r\n  return re\r\n}\r\n", "import reFactory from './lib/re.mjs'\r\n\r\n//\r\n// Helpers\r\n//\r\n\r\n// Merge objects\r\n//\r\nfunction assign (obj /* from1, from2, from3, ... */) {\r\n  const sources = Array.prototype.slice.call(arguments, 1)\r\n\r\n  sources.forEach(function (source) {\r\n    if (!source) { return }\r\n\r\n    Object.keys(source).forEach(function (key) {\r\n      obj[key] = source[key]\r\n    })\r\n  })\r\n\r\n  return obj\r\n}\r\n\r\nfunction _class (obj) { return Object.prototype.toString.call(obj) }\r\nfunction isString (obj) { return _class(obj) === '[object String]' }\r\nfunction isObject (obj) { return _class(obj) === '[object Object]' }\r\nfunction isRegExp (obj) { return _class(obj) === '[object RegExp]' }\r\nfunction isFunction (obj) { return _class(obj) === '[object Function]' }\r\n\r\nfunction escapeRE (str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&') }\r\n\r\n//\r\n\r\nconst defaultOptions = {\r\n  fuzzyLink: true,\r\n  fuzzyEmail: true,\r\n  fuzzyIP: false\r\n}\r\n\r\nfunction isOptionsObj (obj) {\r\n  return Object.keys(obj || {}).reduce(function (acc, k) {\r\n    /* eslint-disable-next-line no-prototype-builtins */\r\n    return acc || defaultOptions.hasOwnProperty(k)\r\n  }, false)\r\n}\r\n\r\nconst defaultSchemas = {\r\n  'http:': {\r\n    validate: function (text, pos, self) {\r\n      const tail = text.slice(pos)\r\n\r\n      if (!self.re.http) {\r\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\r\n        self.re.http = new RegExp(\r\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\r\n        )\r\n      }\r\n      if (self.re.http.test(tail)) {\r\n        return tail.match(self.re.http)[0].length\r\n      }\r\n      return 0\r\n    }\r\n  },\r\n  'https:': 'http:',\r\n  'ftp:': 'http:',\r\n  '//': {\r\n    validate: function (text, pos, self) {\r\n      const tail = text.slice(pos)\r\n\r\n      if (!self.re.no_http) {\r\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\r\n        self.re.no_http = new RegExp(\r\n          '^' +\r\n          self.re.src_auth +\r\n          // Don't allow single-level domains, because of false positives like '//test'\r\n          // with code comments\r\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\r\n          self.re.src_port +\r\n          self.re.src_host_terminator +\r\n          self.re.src_path,\r\n\r\n          'i'\r\n        )\r\n      }\r\n\r\n      if (self.re.no_http.test(tail)) {\r\n        // should not be `://` & `///`, that protects from errors in protocol name\r\n        if (pos >= 3 && text[pos - 3] === ':') { return 0 }\r\n        if (pos >= 3 && text[pos - 3] === '/') { return 0 }\r\n        return tail.match(self.re.no_http)[0].length\r\n      }\r\n      return 0\r\n    }\r\n  },\r\n  'mailto:': {\r\n    validate: function (text, pos, self) {\r\n      const tail = text.slice(pos)\r\n\r\n      if (!self.re.mailto) {\r\n        self.re.mailto = new RegExp(\r\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\r\n        )\r\n      }\r\n      if (self.re.mailto.test(tail)) {\r\n        return tail.match(self.re.mailto)[0].length\r\n      }\r\n      return 0\r\n    }\r\n  }\r\n}\r\n\r\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\r\n/* eslint-disable-next-line max-len */\r\nconst tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]'\r\n\r\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\r\nconst tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|')\r\n\r\nfunction resetScanCache (self) {\r\n  self.__index__ = -1\r\n  self.__text_cache__ = ''\r\n}\r\n\r\nfunction createValidator (re) {\r\n  return function (text, pos) {\r\n    const tail = text.slice(pos)\r\n\r\n    if (re.test(tail)) {\r\n      return tail.match(re)[0].length\r\n    }\r\n    return 0\r\n  }\r\n}\r\n\r\nfunction createNormalizer () {\r\n  return function (match, self) {\r\n    self.normalize(match)\r\n  }\r\n}\r\n\r\n// Schemas compiler. Build regexps.\r\n//\r\nfunction compile (self) {\r\n  // Load & clone RE patterns.\r\n  const re = self.re = reFactory(self.__opts__)\r\n\r\n  // Define dynamic patterns\r\n  const tlds = self.__tlds__.slice()\r\n\r\n  self.onCompile()\r\n\r\n  if (!self.__tlds_replaced__) {\r\n    tlds.push(tlds_2ch_src_re)\r\n  }\r\n  tlds.push(re.src_xn)\r\n\r\n  re.src_tlds = tlds.join('|')\r\n\r\n  function untpl (tpl) { return tpl.replace('%TLDS%', re.src_tlds) }\r\n\r\n  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i')\r\n  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i')\r\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i')\r\n  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i')\r\n\r\n  //\r\n  // Compile each schema\r\n  //\r\n\r\n  const aliases = []\r\n\r\n  self.__compiled__ = {} // Reset compiled data\r\n\r\n  function schemaError (name, val) {\r\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val)\r\n  }\r\n\r\n  Object.keys(self.__schemas__).forEach(function (name) {\r\n    const val = self.__schemas__[name]\r\n\r\n    // skip disabled methods\r\n    if (val === null) { return }\r\n\r\n    const compiled = { validate: null, link: null }\r\n\r\n    self.__compiled__[name] = compiled\r\n\r\n    if (isObject(val)) {\r\n      if (isRegExp(val.validate)) {\r\n        compiled.validate = createValidator(val.validate)\r\n      } else if (isFunction(val.validate)) {\r\n        compiled.validate = val.validate\r\n      } else {\r\n        schemaError(name, val)\r\n      }\r\n\r\n      if (isFunction(val.normalize)) {\r\n        compiled.normalize = val.normalize\r\n      } else if (!val.normalize) {\r\n        compiled.normalize = createNormalizer()\r\n      } else {\r\n        schemaError(name, val)\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    if (isString(val)) {\r\n      aliases.push(name)\r\n      return\r\n    }\r\n\r\n    schemaError(name, val)\r\n  })\r\n\r\n  //\r\n  // Compile postponed aliases\r\n  //\r\n\r\n  aliases.forEach(function (alias) {\r\n    if (!self.__compiled__[self.__schemas__[alias]]) {\r\n      // Silently fail on missed schemas to avoid errons on disable.\r\n      // schemaError(alias, self.__schemas__[alias]);\r\n      return\r\n    }\r\n\r\n    self.__compiled__[alias].validate =\r\n      self.__compiled__[self.__schemas__[alias]].validate\r\n    self.__compiled__[alias].normalize =\r\n      self.__compiled__[self.__schemas__[alias]].normalize\r\n  })\r\n\r\n  //\r\n  // Fake record for guessed links\r\n  //\r\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() }\r\n\r\n  //\r\n  // Build schema condition\r\n  //\r\n  const slist = Object.keys(self.__compiled__)\r\n    .filter(function (name) {\r\n      // Filter disabled & fake schemas\r\n      return name.length > 0 && self.__compiled__[name]\r\n    })\r\n    .map(escapeRE)\r\n    .join('|')\r\n  // (?!_) cause 1.5x slowdown\r\n  self.re.schema_test = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i')\r\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig')\r\n  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i')\r\n\r\n  self.re.pretest = RegExp(\r\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\r\n    'i'\r\n  )\r\n\r\n  //\r\n  // Cleanup\r\n  //\r\n\r\n  resetScanCache(self)\r\n}\r\n\r\n/**\r\n * class Match\r\n *\r\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\r\n **/\r\nfunction Match (self, shift) {\r\n  const start = self.__index__\r\n  const end = self.__last_index__\r\n  const text = self.__text_cache__.slice(start, end)\r\n\r\n  /**\r\n   * Match#schema -> String\r\n   *\r\n   * Prefix (protocol) for matched string.\r\n   **/\r\n  this.schema = self.__schema__.toLowerCase()\r\n  /**\r\n   * Match#index -> Number\r\n   *\r\n   * First position of matched string.\r\n   **/\r\n  this.index = start + shift\r\n  /**\r\n   * Match#lastIndex -> Number\r\n   *\r\n   * Next position after matched string.\r\n   **/\r\n  this.lastIndex = end + shift\r\n  /**\r\n   * Match#raw -> String\r\n   *\r\n   * Matched string.\r\n   **/\r\n  this.raw = text\r\n  /**\r\n   * Match#text -> String\r\n   *\r\n   * Notmalized text of matched string.\r\n   **/\r\n  this.text = text\r\n  /**\r\n   * Match#url -> String\r\n   *\r\n   * Normalized url of matched string.\r\n   **/\r\n  this.url = text\r\n}\r\n\r\nfunction createMatch (self, shift) {\r\n  const match = new Match(self, shift)\r\n\r\n  self.__compiled__[match.schema].normalize(match, self)\r\n\r\n  return match\r\n}\r\n\r\n/**\r\n * class LinkifyIt\r\n **/\r\n\r\n/**\r\n * new LinkifyIt(schemas, options)\r\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\r\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\r\n *\r\n * Creates new linkifier instance with optional additional schemas.\r\n * Can be called without `new` keyword for convenience.\r\n *\r\n * By default understands:\r\n *\r\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\r\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\r\n *\r\n * `schemas` is an object, where each key/value describes protocol/rule:\r\n *\r\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\r\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\r\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\r\n * - __value__ - rule to check tail after link prefix\r\n *   - _String_ - just alias to existing rule\r\n *   - _Object_\r\n *     - _validate_ - validator function (should return matched length on success),\r\n *       or `RegExp`.\r\n *     - _normalize_ - optional function to normalize text & url of matched result\r\n *       (for example, for @twitter mentions).\r\n *\r\n * `options`:\r\n *\r\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\r\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\r\n *   like version numbers. Default `false`.\r\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\r\n *\r\n **/\r\nfunction LinkifyIt (schemas, options) {\r\n  if (!(this instanceof LinkifyIt)) {\r\n    return new LinkifyIt(schemas, options)\r\n  }\r\n\r\n  if (!options) {\r\n    if (isOptionsObj(schemas)) {\r\n      options = schemas\r\n      schemas = {}\r\n    }\r\n  }\r\n\r\n  this.__opts__ = assign({}, defaultOptions, options)\r\n\r\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\r\n  this.__index__ = -1\r\n  this.__last_index__ = -1 // Next scan position\r\n  this.__schema__ = ''\r\n  this.__text_cache__ = ''\r\n\r\n  this.__schemas__ = assign({}, defaultSchemas, schemas)\r\n  this.__compiled__ = {}\r\n\r\n  this.__tlds__ = tlds_default\r\n  this.__tlds_replaced__ = false\r\n\r\n  this.re = {}\r\n\r\n  compile(this)\r\n}\r\n\r\n/** chainable\r\n * LinkifyIt#add(schema, definition)\r\n * - schema (String): rule name (fixed pattern prefix)\r\n * - definition (String|RegExp|Object): schema definition\r\n *\r\n * Add new rule definition. See constructor description for details.\r\n **/\r\nLinkifyIt.prototype.add = function add (schema, definition) {\r\n  this.__schemas__[schema] = definition\r\n  compile(this)\r\n  return this\r\n}\r\n\r\n/** chainable\r\n * LinkifyIt#set(options)\r\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\r\n *\r\n * Set recognition options for links without schema.\r\n **/\r\nLinkifyIt.prototype.set = function set (options) {\r\n  this.__opts__ = assign(this.__opts__, options)\r\n  return this\r\n}\r\n\r\n/**\r\n * LinkifyIt#test(text) -> Boolean\r\n *\r\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\r\n **/\r\nLinkifyIt.prototype.test = function test (text) {\r\n  // Reset scan cache\r\n  this.__text_cache__ = text\r\n  this.__index__ = -1\r\n\r\n  if (!text.length) { return false }\r\n\r\n  let m, ml, me, len, shift, next, re, tld_pos, at_pos\r\n\r\n  // try to scan for link with schema - that's the most simple rule\r\n  if (this.re.schema_test.test(text)) {\r\n    re = this.re.schema_search\r\n    re.lastIndex = 0\r\n    while ((m = re.exec(text)) !== null) {\r\n      len = this.testSchemaAt(text, m[2], re.lastIndex)\r\n      if (len) {\r\n        this.__schema__ = m[2]\r\n        this.__index__ = m.index + m[1].length\r\n        this.__last_index__ = m.index + m[0].length + len\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\r\n    // guess schemaless links\r\n    tld_pos = text.search(this.re.host_fuzzy_test)\r\n    if (tld_pos >= 0) {\r\n      // if tld is located after found link - no need to check fuzzy pattern\r\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\r\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\r\n          shift = ml.index + ml[1].length\r\n\r\n          if (this.__index__ < 0 || shift < this.__index__) {\r\n            this.__schema__ = ''\r\n            this.__index__ = shift\r\n            this.__last_index__ = ml.index + ml[0].length\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\r\n    // guess schemaless emails\r\n    at_pos = text.indexOf('@')\r\n    if (at_pos >= 0) {\r\n      // We can't skip this check, because this cases are possible:\r\n      // 192.168.1.1@gmail.com, my.in@example.com\r\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\r\n        shift = me.index + me[1].length\r\n        next = me.index + me[0].length\r\n\r\n        if (this.__index__ < 0 || shift < this.__index__ ||\r\n            (shift === this.__index__ && next > this.__last_index__)) {\r\n          this.__schema__ = 'mailto:'\r\n          this.__index__ = shift\r\n          this.__last_index__ = next\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return this.__index__ >= 0\r\n}\r\n\r\n/**\r\n * LinkifyIt#pretest(text) -> Boolean\r\n *\r\n * Very quick check, that can give false positives. Returns true if link MAY BE\r\n * can exists. Can be used for speed optimization, when you need to check that\r\n * link NOT exists.\r\n **/\r\nLinkifyIt.prototype.pretest = function pretest (text) {\r\n  return this.re.pretest.test(text)\r\n}\r\n\r\n/**\r\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\r\n * - text (String): text to scan\r\n * - name (String): rule (schema) name\r\n * - position (Number): text offset to check from\r\n *\r\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\r\n * at given position. Returns length of found pattern (0 on fail).\r\n **/\r\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt (text, schema, pos) {\r\n  // If not supported schema check requested - terminate\r\n  if (!this.__compiled__[schema.toLowerCase()]) {\r\n    return 0\r\n  }\r\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this)\r\n}\r\n\r\n/**\r\n * LinkifyIt#match(text) -> Array|null\r\n *\r\n * Returns array of found link descriptions or `null` on fail. We strongly\r\n * recommend to use [[LinkifyIt#test]] first, for best speed.\r\n *\r\n * ##### Result match description\r\n *\r\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\r\n *   protocol-neutral  links.\r\n * - __index__ - offset of matched text\r\n * - __lastIndex__ - index of next char after mathch end\r\n * - __raw__ - matched text\r\n * - __text__ - normalized text\r\n * - __url__ - link, generated from matched text\r\n **/\r\nLinkifyIt.prototype.match = function match (text) {\r\n  const result = []\r\n  let shift = 0\r\n\r\n  // Try to take previous element from cache, if .test() called before\r\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\r\n    result.push(createMatch(this, shift))\r\n    shift = this.__last_index__\r\n  }\r\n\r\n  // Cut head if cache was used\r\n  let tail = shift ? text.slice(shift) : text\r\n\r\n  // Scan string until end reached\r\n  while (this.test(tail)) {\r\n    result.push(createMatch(this, shift))\r\n\r\n    tail = tail.slice(this.__last_index__)\r\n    shift += this.__last_index__\r\n  }\r\n\r\n  if (result.length) {\r\n    return result\r\n  }\r\n\r\n  return null\r\n}\r\n\r\n/**\r\n * LinkifyIt#matchAtStart(text) -> Match|null\r\n *\r\n * Returns fully-formed (not fuzzy) link if it starts at the beginning\r\n * of the string, and null otherwise.\r\n **/\r\nLinkifyIt.prototype.matchAtStart = function matchAtStart (text) {\r\n  // Reset scan cache\r\n  this.__text_cache__ = text\r\n  this.__index__ = -1\r\n\r\n  if (!text.length) return null\r\n\r\n  const m = this.re.schema_at_start.exec(text)\r\n  if (!m) return null\r\n\r\n  const len = this.testSchemaAt(text, m[2], m[0].length)\r\n  if (!len) return null\r\n\r\n  this.__schema__ = m[2]\r\n  this.__index__ = m.index + m[1].length\r\n  this.__last_index__ = m.index + m[0].length + len\r\n\r\n  return createMatch(this, 0)\r\n}\r\n\r\n/** chainable\r\n * LinkifyIt#tlds(list [, keepOld]) -> this\r\n * - list (Array): list of tlds\r\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\r\n *\r\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\r\n * to avoid false positives. By default this algorythm used:\r\n *\r\n * - hostname with any 2-letter root zones are ok.\r\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\r\n *   are ok.\r\n * - encoded (`xn--...`) root zones are ok.\r\n *\r\n * If list is replaced, then exact match for 2-chars root zones will be checked.\r\n **/\r\nLinkifyIt.prototype.tlds = function tlds (list, keepOld) {\r\n  list = Array.isArray(list) ? list : [list]\r\n\r\n  if (!keepOld) {\r\n    this.__tlds__ = list.slice()\r\n    this.__tlds_replaced__ = true\r\n    compile(this)\r\n    return this\r\n  }\r\n\r\n  this.__tlds__ = this.__tlds__.concat(list)\r\n    .sort()\r\n    .filter(function (el, idx, arr) {\r\n      return el !== arr[idx - 1]\r\n    })\r\n    .reverse()\r\n\r\n  compile(this)\r\n  return this\r\n}\r\n\r\n/**\r\n * LinkifyIt#normalize(match)\r\n *\r\n * Default normalizer (if schema does not define it's own).\r\n **/\r\nLinkifyIt.prototype.normalize = function normalize (match) {\r\n  // Do minimal possible changes by default. Need to collect feedback prior\r\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\r\n\r\n  if (!match.schema) { match.url = 'http://' + match.url }\r\n\r\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\r\n    match.url = 'mailto:' + match.url\r\n  }\r\n}\r\n\r\n/**\r\n * LinkifyIt#onCompile()\r\n *\r\n * Override to modify basic RegExp-s.\r\n **/\r\nLinkifyIt.prototype.onCompile = function onCompile () {\r\n}\r\n\r\nexport default LinkifyIt\r\n"],
  "mappings": "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",
  "names": ["regex_default", "match", "tlds"]
}
